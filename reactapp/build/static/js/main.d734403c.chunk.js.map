{"version":3,"sources":["components/ResultBox.js","components/Search.js","serviceWorker.js","index.js"],"names":["ResultBox","props","state","className","style","margin","this","text","Component","Search","marvelMovieList","list","change","bind","role","textAlign","id","onChange","map","row","key","name","evt","console","log","target","value","searchString","searchList","toLowerCase","includes","length","push","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d734403c.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ResultBox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n    render() {\n        return (\n            <div className=\"navbar media bg-white rounded form-group pt-2\" style={{ margin: '-15px 0 0 0' }}>\n                <label className=\"input-lg media-body\">{this.props.text}</label>\n            </div>\n\n        );\n    }\n}\n\nexport default ResultBox;","import React, { Component } from 'react';\nimport ResultBox from './ResultBox';\n\n\nclass Search extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            marvelMovieList: [{ \"id\": 1, \"name\": \"Ant-Man\" }, { \"id\": 2, \"name\": \"Ant-Man and the Wasp\" }, { \"id\": 3, \"name\": \"Avengers: Age of Ultron\" }, { \"id\": 4, \"name\": \"Avengers: Endgame\" }, { \"id\": 5, \"name\": \"Avengers: Infinity War\" }, { \"id\": 6, \"name\": \"Black Panther\" }, { \"id\": 7, \"name\": \"Black Widow\" }, { \"id\": 8, \"name\": \"Blade\" }, { \"id\": 9, \"name\": \"Blade II\" }, { \"id\": 10, \"name\": \"Blade: Trinity\" }, { \"id\": 11, \"name\": \"Captain America\" }, { \"id\": 12, \"name\": \"Captain America\" }, { \"id\": 13, \"name\": \"Captain America: Civil War\" }, { \"id\": 14, \"name\": \"Captain America: The First Avenger\" }, { \"id\": 15, \"name\": \"Captain America: The Winter Soldier\" }, { \"id\": 16, \"name\": \"Captain Marvel\" }, { \"id\": 17, \"name\": \"Daredevil\" }, { \"id\": 18, \"name\": \"Dark Phoenix\" }, { \"id\": 19, \"name\": \"Deadpool\" }, { \"id\": 20, \"name\": \"Deadpool 2\" }, { \"id\": 21, \"name\": \"Doctor Strange\" }, { \"id\": 22, \"name\": \"Elektra\" }, { \"id\": 23, \"name\": \"Fantastic Four\" }, { \"id\": 24, \"name\": \"Fantastic Four\" }, { \"id\": 25, \"name\": \"Fantastic Four: Rise of the Silver Surfer\" }, { \"id\": 26, \"name\": \"Ghost Rider\" }, { \"id\": 27, \"name\": \"Ghost Rider: Spirit of Vengeance\" }, { \"id\": 28, \"name\": \"Guardians of the Galaxy\" }, { \"id\": 29, \"name\": \"Guardians of the Galaxy Vol. 2\" }, { \"id\": 30, \"name\": \"Howard the Duck\" }, { \"id\": 31, \"name\": \"Hulk\" }, { \"id\": 32, \"name\": \"Iron Man\" }, { \"id\": 33, \"name\": \"Iron Man 2\" }, { \"id\": 34, \"name\": \"Iron Man 3\" }, { \"id\": 35, \"name\": \"Logan\" }, { \"id\": 36, \"name\": \"Morbius\" }, { \"id\": 37, \"name\": \"Punisher: War Zone\" }, { \"id\": 38, \"name\": \"Shang-Chi and the Legend of the Ten Rings\" }, { \"id\": 39, \"name\": \"Spider-Man\" }, { \"id\": 40, \"name\": \"Spider-Man 2\" }, { \"id\": 41, \"name\": \"Spider-Man 3\" }, { \"id\": 42, \"name\": \"Spider-Man: Far From Home\" }, { \"id\": 43, \"name\": \"The Amazing Spider-Man\" }, { \"id\": 44, \"name\": \"The Amazing Spider-Man 2\" }, { \"id\": 45, \"name\": \"The Avengers\" }, { \"id\": 46, \"name\": \"The Eternals\" }, { \"id\": 47, \"name\": \"The Fantastic Four\" }, { \"id\": 48, \"name\": \"The Incredible Hulk\" }, { \"id\": 49, \"name\": \"The New Mutants\" }, { \"id\": 50, \"name\": \"The Punisher\" }, { \"id\": 51, \"name\": \"The Punisher\" }, { \"id\": 52, \"name\": \"The Wolverine\" }, { \"id\": 53, \"name\": \"Thor\" }, { \"id\": 54, \"name\": \"Thor: Ragnarok\" }, { \"id\": 55, \"name\": \"Thor: The Dark World\" }, { \"id\": 56, \"name\": \"Venom\" }, { \"id\": 57, \"name\": \"Venom: Let There Be Carnage\" }, { \"id\": 58, \"name\": \"X-Men\" }, { \"id\": 59, \"name\": \"X-Men Origins: Wolverine\" }, { \"id\": 60, \"name\": \"X-Men: Apocalypse\" }, { \"id\": 61, \"name\": \"X-Men: Days of Future Past\" }, { \"id\": 62, \"name\": \"X-Men: First Class\" }, { \"id\": 63, \"name\": \"X-Men: The Last Stand\" }, { \"id\": 64, \"name\": \"X2\" }],\n            list:[]\n        }\n        this.change = this.change.bind(this);\n    }\n\n    render() {\n        return (\n            <main role=\"main\" className=\"container mt-5\">\n                <span style={{ textAlign: \"center\" }}><h2>Search for Marvel movies.</h2></span>\n                <div className=\"my-3 p-3 bg-light rounded box-shadow\">\n                    <div className=\"media form-group pt-3\">\n                        <input text=\"search\"\n                            className=\"form-control input-lg media-body\"\n                            id=\"searchBox\"\n                            onChange={this.change}\n                        />\n                    </div>\n                    <div className='continer' id='searchResults'>\n                        {this.state.list.map((row) => (\n                            <ResultBox key={row.id} text={row.name} />\n                        ))}\n                    </div>\n\n                </div>\n            </main>\n        );\n    }\n    change(evt) {\n        console.log(evt.target.value);\n        const searchString = evt.target.value\n        const searchList = []\n        //Search the movie\n        this.state.marvelMovieList.map((row) =>{\n            if(row.name.toLowerCase().includes(searchString.toLowerCase()) && searchString!==''\n            && searchString!=='-'){\n                if(searchList.length < 15)\n                    searchList.push(row)\n            }\n            return searchList;\n        })\n        this.setState({\n            list:searchList\n        })\n    }\n}\n\nexport default Search;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Search from './components/Search';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Search />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}