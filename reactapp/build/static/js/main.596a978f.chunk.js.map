{"version":3,"sources":["serviceWorker.js","components/Suggestions.js","components/Card.js","components/Search.js","components/Movie.js","components/Routes.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Suggestions","className","onClick","this","props","title","Component","Card","history","push","show_id","React","withRouter","userInput","Search","state","AllMovies","MovieList","selectedTup","userI","suggest","bind","showSuggestions","sugClick","showCard","Axios","get","data","setState","url","e","userInp","target","value","length","dataRequest","borderRadius","boxShadow","map","tup","index","key","document","getElementById","innerText","filter","t","type","id","placeholder","style","onChange","initialShow","Movie","movie","description","release_year","duration","cast","Routes","exact","path","component","App","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.596a978f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from \"react\";\nimport './Suggestions.css';\n\nclass Suggestions extends Component{\n\n    render() {\n        return (\n            <p className=\"name\" onClick={this.props.onClick}>{this.props.title}</p>\n        );\n    }\n}\n\nexport default Suggestions;\n","import React from \"react\";\nimport './Card.css'\nimport {withRouter} from \"react-router-dom\";\n\nexport class Card extends React.Component {\n\n    render() {\n        return (\n            <p className=\"movie\" onClick={() => this.props.history.push('/movie', {'id': this.props.show_id})}>\n                {this.props.title}\n            </p>\n        );\n    }\n}\n\nexport default withRouter(Card);\n","import React, {Component} from \"react\";\nimport \"./Search.css\";\nimport Suggestions from \"./Suggestions\";\nimport Card from \"./Card\";\nimport Axios from \"axios\";\n\nlet userInput = {};\n\nclass Search extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            AllMovies: [],\n            MovieList: [],\n            selectedTup: [],\n            userI: \"\",\n        };\n\n        this.suggest = this.suggest.bind(this);\n        this.showSuggestions = this.showSuggestions.bind(this);\n        this.sugClick = this.sugClick.bind(this);\n        this.showCard = this.showCard.bind(this);\n    }\n\n    async componentDidMount(){\n        const {data : AllMovies} = await Axios.get(\"https://api-tutorial4.herokuapp.com/movies?\");\n        this.setState({AllMovies});\n    }\n\n    async dataRequest(url) {\n        const {data: MovieList} = await Axios.get(url);\n        this.setState({MovieList});\n    }\n\n    suggest(e) {\n        const userInp = e.target.value;\n        this.setState({\n            userI: userInp,\n        });\n        if (userInp.length > 0) {\n            this.setState({\n                selectedTup: [],\n            });\n            this.dataRequest(\n                \"https://api-tutorial4.herokuapp.com/movies?title_like=.*\" + userInp\n            );\n            userInput = {\n                borderRadius: \"5px 5px 0 0\",\n                boxShadow: \"inset 0 0 10px 4px darkcyan\",\n            };\n        } else {\n            this.setState({\n                MovieList: [],\n            });\n            userInput = {};\n        }\n    }\n\n    showSuggestions() {\n        if (this.state.MovieList.length === 0) {\n            return null;\n        }\n        return (\n            <div className=\"listWrapper\">\n                {this.state.MovieList.map((tup, index) => {\n                    return (\n                        <Suggestions\n                            onClick={this.sugClick}\n                            key={index}\n                            title={tup.title}\n                        />\n                    );\n                })}\n            </div>\n        );\n    }\n\n    sugClick(e) {\n        userInput = {};\n        document.getElementById(\"userInput\").value = e.target.innerText;\n\n        const tup = this.state.MovieList.filter((t) => {\n            return t.title === e.target.innerText;\n        });\n\n        this.setState({\n            MovieList: [],\n            selectedTup: tup,\n        });\n    }\n\n    showCard() {\n        if (this.state.userI.length > 0 && this.state.selectedTup.length > 0) {\n            return (\n                <div className=\"card-wrapper\">\n                    {this.state.selectedTup.map((tup, index) => {\n                        return <Card key={index} show_id={tup.show_id} title={tup.title}/>;\n                    })}\n                </div>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    initialShow() {\n        if(this.state.selectedTup.length === 0 || this.state.userI.length === 0){\n            return (\n                <div className=\"card-wrapper\">\n                    {this.state.AllMovies.map((tup, index) => {\n                        return <Card key={index} show_id={tup.show_id} title={tup.title}/>;\n                    })}\n                </div>\n            );\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <div className=\"searchBox\">\n                    <p className=\"header\">Movies</p>\n                    <input\n                        type=\"Search\"\n                        id=\"userInput\"\n                        placeholder=\"Search\"\n                        className=\"userInput\"\n                        style={userInput}\n                        onChange={this.suggest}\n                    />\n                    {this.showSuggestions()}\n                </div>\n                {this.initialShow()}\n                {this.showCard()}\n            </div>\n        );\n    }\n\n\n}\n\nexport default Search;\n","import React, {Component} from \"react\";\nimport Axios from \"axios\";\nimport './Movie.css';\n\nclass Movie extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            movie: []\n        }\n    }\n\n    async componentDidMount(){\n        const id = this.props.location.state.id;\n        const url = \"https://api-tutorial4.herokuapp.com/movies?show_id=\" + id;\n        const data = await Axios.get(url);\n        this.setState({\n            movie: data.data[0]\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div onClick={() => this.props.history.push('/') } className=\"back\"/>\n                <div className=\"spec-movie\">\n                    <h1>Selected Movie ID {this.props.location.state.id}</h1>\n                    <span>Movie Name:</span>\n                    <p>{this.state.movie.title}</p>\n                    <span>Movie Description:</span>\n                    <p>{this.state.movie.description}</p>\n                    <span>Release Year:</span>\n                    <p>{this.state.movie.release_year}</p>\n                    <span>Duration:</span>\n                    <p>{this.state.movie.duration}</p>\n                    <span>Cast:</span>\n                    <p>{this.state.movie.cast}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Movie;\n","import React, {Component} from \"react\";\nimport {Route, Switch} from \"react-router-dom\";\nimport Search from \"./Search\";\nimport Movie from \"./Movie\";\n\nclass Routes extends Component {\n    render() {\n        return (\n            <Switch>\n                <Route exact path='/' component={Search}/>\n                <Route exact path='/movie' component={Movie}/>\n            </Switch>\n        );\n    }\n}\n\nexport default Routes;\n","import React from 'react';\nimport Routes from \"./components/Routes\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Router>\n            <Routes />\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}